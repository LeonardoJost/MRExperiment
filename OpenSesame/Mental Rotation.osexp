---
API: 2.1
OpenSesame: 3.2.8
Platform: nt
---
set width 1680
set uniform_coordinates yes
set title "Mental Rotation with 3 figures"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend legacy
set round_decimals 2
set mouse_backend legacy
set keyboard_backend legacy
set height 1050
set fullscreen no
set form_clicks no
set foreground white
set font_underline no
set font_size 24
set font_italic no
set font_family sans
set font_bold no
set experiment_path "C:\\Users\\LocalAdmin\\Documents\\Programmierung\\R\\MRExperiment\\OpenSesame"
set disable_garbage_collection yes
set description "The main experiment item"
set coordinates uniform
set compensation 0
set color_backend legacy
set clock_backend legacy
set canvas_backend legacy
set background "#000000"

define sequence BlockSequence
	set flush_keyboard yes
	set description "Führt mehrere Items nacheinander aus"
	run ReadInstructions always
	run ShowInstructionsFixedDuration always
	run ShowInstructions always
	run setTime always
	run ShowStimuli always

define loop Blocks
	set source_file ""
	set source table
	set repeat 1
	set order sequential
	set description "Führt wiederholt ein anderes Item aus"
	set cycles 2
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 aaBlock practice
	setcycle 0 instructions "InstructionsPractice.txt"
	setcycle 0 maxDurationMins 1
	setcycle 0 feedbackDuration 1000
	setcycle 0 feedback 1
	setcycle 1 aaBlock main
	setcycle 1 instructions "Instructions.txt"
	setcycle 1 maxDurationMins 1
	setcycle 1 feedbackDuration 500
	setcycle 1 feedback 0
	run BlockSequence

define inline_script CreateID
	set description "Executes Python code"
	___run__
	if(var.customID==1):
		#ask for ID
		#Create a form
		form = Form(
			cols=[1], rows=[2,1],
			margins=(50,50,50,50), spacing=25
		)
		#show form with question and text input
		form.set_widget(Label(text=var.IDprompt, center=False), (0,0))
		textInput=TextInput(return_accepts=True, stub=u'ID')
		form.set_widget(textInput, (0,1))
		var.aaID=form._exec(textInput)
		#print(var.aaID)
	else:
		import time
		var.aaID=time.time()
	__end__
	set _prepare ""

define sketchpad FeedbackCorrect
	set duration 0
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[feedbackCorrect]" x=0 y=0 z_index=0

define sketchpad FeedbackWrong
	set duration 0
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[feedbackWrong]" x=0 y=0 z_index=0

define sketchpad Fixation
	set duration 0
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[fixation]" x=0 y=0 z_index=0

define notepad License
	__note__
	### Mental Rotation experiment according to Jost & Jansen (2019)
	#     Copyright (C) 2019  Leonardo Jost
	# 
	# This program is free software: you can redistribute it and/or modify
	# it under the terms of the GNU General Public License as published by
	# the Free Software Foundation, either version 3 of the License, or
	# (at your option) any later version.
	# 
	# This program is distributed in the hope that it will be useful,
	# but WITHOUT ANY WARRANTY; without even the implied warranty of
	# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	# GNU General Public License for more details.
	# 
	# You should have received a copy of the GNU General Public License
	# along with this program.  If not, see <https://www.gnu.org/licenses/>.
	__end__
	set description "A simple notepad to document your experiment. This plug-in does nothing."

define sequence QuestionSequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run prepareQuestion always
	run ShowForm always
	run questionaireLogger always

define sequence Questionaire
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run ReadQuestions always
	run QuestionsLoop always

define loop QuestionsLoop
	set source_file ""
	set source table
	set repeat "[numberOfQuestions]"
	set order random
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous no
	set break_if_on_first no
	set break_if never
	setcycle 0 empty_column ""
	run QuestionSequence

define inline_script ReadInstructions
	set description "Executes Python code"
	set _run ""
	___prepare__
	import string
	with open(pool[var.instructions]) as file:
		instructionsText = file.read()
	var.instructionsText=instructionsText.decode(u'UTF-8-sig').replace(u'F1',var.feedbackCorrect).replace(u'F2',var.feedbackWrong).replace(u'FX',var.fixation)
	var.instructionsText1=var.instructionsText.split(u'(Continue)')[0]
	#replace part after (Continue) by empty lines to keep spacing/positioning
	#empty lines are trimmed rigorously (even non-breaking spaces) so dots are displyed
	#pixelwise positioning of text is another option but difficult as converting fontsize to px is not uniform
	if len(var.instructionsText.split(u'(Continue)'))>1:
		continueLines=var.instructionsText.split(u'(Continue)')[1].count(u'\n')+1
		var.instructionsText1+=u'.\n'*continueLines
	#remove (Continue)
	var.instructionsText=var.instructionsText.replace(u'(Continue)',u'')
	__end__

define inline_script ReadQuestions
	set description "Executes Python code"
	___run__
	import string
	with open(pool[var.questionaireFile]) as file:
		var.questionsText = file.readlines()
	var.numberOfQuestions=len(var.questionsText)
	var.questionNumber=0
	var.aaBlock=u'questionaire'
	var.answerList=list()
	var.showQuestion=1  #true is converted to yes, use 0/1 instead
	var.form_response=u''
	__end__
	set _prepare ""

define inline_script SetNamesAndResponses
	set description "Executes Python code"
	set _run ""
	___prepare__
	import random
	#load next stimuli from stimulusList
	var.model,var.angle,var.orientation,var.axis=var.stimulusList[var.stimulusNumber]
	var.stimulusNumber=var.stimulusNumber+1
	#randomize orientation of left and right base figure
	orientationsArray=var.orientations
	random.shuffle(orientationsArray)
	#set filenames of stimuli
	var.modelLeftFile=str(var.model)+u'_'+orientationsArray[0]+u'.png'
	var.modelRightFile=str(var.model)+u'_'+orientationsArray[1]+u'.png'
	if var.angle==0:
		var.stimulusFile=str(var.model)+u'_'+var.orientation+u'.png'
	else:
		var.stimulusFile=str(var.model)+u'_'+var.orientation+u'_'+var.axis+u'_'+str(var.angle)+u'.png'
	var.orientationLeftBase=orientationsArray[0]
	#set correct responses
	if orientationsArray[0]==var.orientation:
		var.correct_response=1
	else:
		var.correct_response=3
	__end__

define inline_script ShowForm
	set description "Executes Python code"
	___run__
	if(var.showQuestion==1):
		#parameters
		var.responseModified=u''
		var.questionAppend=var.noAnswerError
		#show question until answer is given
		while(var.responseModified==u''):
			# Create a form
			form = Form(
				cols=[1]*var.ncols, rows=[2,1],
				margins=(50,100,50,100), spacing=25
			)
			#set widgets: question
			form.set_widget(Label(text=var.thisQuestion, center=False), (0,0), colspan=var.ncols)
			#set widgets depending on type and show form
			#show form and get an answer
			if var.questionType==u'TextInput':
				textInput=TextInput(return_accepts=True, stub=u'Antwort', var=u'qAnswer')
				form.set_widget(textInput, (0,1), colspan=3)
				#add button to avoid answering
				form.set_widget(Button(text=u'Ok', var=u'ok'), (3,1))
				form.set_widget(Button(text=var.avoidQuestion), (4,1))		
				form_response=form._exec(textInput)
			elif var.questionType==u'Multiple':
				for col in range(var.ncols):
					form.set_widget(Button(text=var.thisQuestionOptions[col]), (col,1))		
				form_response=form._exec()
			elif var.questionType==u'ManualCode':
				textInput=TextInput(return_accepts=True, stub=u'', var=u'qAnswer')
				form.set_widget(textInput, (0,1))	
				form_response=form._exec(textInput)
			else: #default is ShowText to avoid problems with first index
				form.set_widget(Button(text=u'Ok'), (0,1))
				form_response=form._exec()
			#read answer
			#get text answer from textinput if text is approved by button
			if var.questionType==u'TextInput' and not form_response==var.avoidQuestion:
				var.responseModified=var.qAnswer
			elif var.questionType==u'ManualCode' and not var.qAnswer==var.thisQuestionID:
				var.responseModified=u''
				var.questionAppend=u''
			else: 
				var.responseModified=form_response
			#modify question for repeat	
			var.thisQuestion=var.thisQuestion+var.questionAppend
			#do not append more if question is again not answered
			var.questionAppend=u''
	#save answer in list (for comparison with conditions)	
	var.answerList.append((var.thisQuestionID,var.var.responseModified))
	__end__
	set _prepare ""

define sketchpad ShowInstructions
	set duration mouseclick
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size="[instructionFontSize]" html=yes show_if=always text="[instructionsText]" x=0 y=0 z_index=0

define sketchpad ShowInstructionsFixedDuration
	set duration "[instructionDuration]"
	set description "Präsentiert Stimuli"
	draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size="[instructionFontSize]" html=yes show_if=always text="[instructionsText1]" x=0 y=0 z_index=0

define loop ShowStimuli
	set source_file ""
	set source table
	set repeat "[loopRuns]"
	set order sequential
	set description "Führt wiederholt ein anderes Item aus"
	set cycles 1
	set continuous no
	set break_if_on_first yes
	set break_if "[endTime]>[maxDuration]"
	setcycle 0 empty_column ""
	run ShowStimuliSequence

define sequence ShowStimuliSequence
	set flush_keyboard yes
	set description "Führt mehrere Items nacheinander aus"
	run setStartTime always
	run SetNamesAndResponses always
	run Stimulus always
	run mouseResponse always
	run stimulusLogger always
	run FeedbackCorrect "[feedback]=1 and [correct]=1"
	run FeedbackWrong "[feedback]=1 and [correct]=0"
	run Fixation "[feedback]=0"
	run calculateDuration always

define sketchpad Stimulus
	# draw textline center=1 color=white font_bold=no font_family=sans font_italic=no font_size=40 html=yes show_if=always text="[endTime]" x=0 y=0 z_index=0
	set duration 0
	set description "Präsentiert Stimuli"
	draw image center=1 file="[modelLeftFile]" scale=1 show_if=always x=-300 y=-150 z_index=0
	draw image center=1 file="[modelRightFile]" scale=1 show_if=always x=300 y=-150 z_index=0
	draw image center=1 file="[stimulusFile]" scale=1 show_if=always x=0 y=150 z_index=0

define inline_script StimulusRandomization
	set description "Executes Python code"
	set _run ""
	___prepare__
	import random
	#initialize lists
	stimulusList=list()
	stimulusList1=list()
	#add all stimuli once to stimulusList1
	for model in var.models:
		for angle in var.angles:
			for orientation in var.orientations:
				if angle==0:
					stimulusList1.append((model,angle,orientation,u'0'))
				else:	
					for axis in var.axes:
						stimulusList1.append((model,angle,orientation,axis))
						
	for i in range(var.numberOfTrials):
		#randomize order in stimulusList1 until overlap condition is met	
		overlap=1
		while overlap>0:
			random.shuffle(stimulusList1)
			overlap=len(set(stimulusList1[:var.minOverlap]).intersection(stimulusList[len(stimulusList)-var.minOverlap:]))
		#add all stimuli to stimulusList	
		for stimulusPair in stimulusList1:
			stimulusList.append(stimulusPair)
	var.stimulusList=stimulusList
	#set starting index (continued list through all blocks)
	var.stimulusNumber=0
	__end__

define inline_script calculateDuration
	set description "Executes Python code"
	___run__
	#calculate end time of feedback from start of stimulus and response time
	##use this line if you want timing by start time of stimulus
	#var.duration=var.time_Stimulus-var.startTimeOfBlock
	var.endTime=var.duration+var.response_time+var.feedbackDuration
	#check if time is out
	if var.endTime>var.maxDuration and var.feedback:
		#show feedback
		clock.sleep(var.endTime-self.time()+var.startTimeOfBlock)
	#note that feedback for other trials is shown in prepare phase of this script
	__end__
	___prepare__
	#and show feedback/fixation of previous trial for approximately the correct time
	#print(var.endTime-self.time()+var.startTimeOfBlock)
	clock.sleep(var.endTime-self.time()+var.startTimeOfBlock)
	#note that exit condition is checked in run phase of this script
	__end__

define sequence experiment
	set flush_keyboard yes
	set description "Führt mehrere Items nacheinander aus"
	run License always
	run parameters always
	run StimulusRandomization always
	run CreateID always
	run Blocks always
	run Questionaire always

define mouse_response mouseResponse
	set timeout infinite
	set show_cursor no
	set linked_sketchpad Stimulus
	set flush yes
	set event_type mouseclick
	set duration mouseclick
	set description "Sammelt Mausreaktionen"
	set allowed_responses "1;3"

define inline_script parameters
	set description "Executes Python code"
	set _run ""
	___prepare__
	### parameters
	#should a custom ID be used? Otherwise date and time will be ID
	#1 for true, 0 (or other) for false) #true is converted to yes, use 0/1 instead
	var.customID=0
	#ID prompt (only necessary if customID is used)
	var.IDprompt=u'Bitte ID eingeben und mit Enter bestätigen.'
	##feedback/fixation (fixation is automatically chosen if no feedback is given)
	#also used to replace placeholders in instructions
	var.feedbackCorrect=u'✓'
	var.feedbackWrong=u'✗'
	var.fixation=u'+'
	##instructions
	#minimum duration of instructions in ms
	var.instructionDuration=1000
	var.instructionFontSize=18
	##questionaire: 
	#option to avoid question
	var.avoidQuestion=u'keine Angabe'
	#file containing questions
	var.questionaireFile=u'Fragebogen.txt'
	#added message if no answer is given
	var.noAnswerError=u'\n\nBitte geben Sie eine Antwort ein'
	#stimulus generation
	#number of occurences of each stimulus in the generated random list
	var.numberOfTrials=3
	#stimulus parameters
	var.minOverlap=20 #minimal number of stimuli at start and end of random lists, that are not the same (should be at least 0 and well below total number of stimuli divided by 2 otherwise endless looping)
	#array of model numbers
	numberOfModels=16
	var.models=list(range(1,numberOfModels+1))
	#angles of rotation
	angleDiff=45
	minAngle=0
	maxAngle=360
	var.angles=list(range(minAngle,maxAngle,angleDiff))
	#orientations
	var.orientations=[u'a',u'b']
	#axes
	var.axes=[u'y',u'z']
	__end__

define inline_script prepareQuestion
	set description "Executes Python code"
	set _run ""
	___prepare__
	#get this question
	thisQuestionFull=var.questionsText[var.questionNumber].decode(u'UTF-8-sig')
	var.questionNumber=var.questionNumber+1
	#prepare
	var.showQuestion=1
	#get question type
	#if question starts with ( -> type
	if thisQuestionFull[0]==u'(':
		thisQuestionSplit=thisQuestionFull.split(u')')
		thisQuestionType=thisQuestionSplit[0].replace(u'(','',1)
		#rest of question (+2 for brackets)
		thisQuestionRest=thisQuestionFull[len(thisQuestionType)+2:]
	else:
		thisQuestionType=u''
		thisQuestionRest=thisQuestionFull
		print(thisQuestionFull[:3])
	var.questionType=thisQuestionType
	#if questiontype is multiple -> get Options
	if thisQuestionType=='Multiple':
		#get options in parenthenses
		var.thisQuestionOptions=thisQuestionRest.split(u')')[0].split(u',')
		#remove leading (
		var.thisQuestionOptions[0]=var.thisQuestionOptions[0][1:]
		#add additional option
		var.thisQuestionOptions.append(var.avoidQuestion)
		var.ncols=len(var.thisQuestionOptions)
		thisQuestionRest=thisQuestionRest[len(thisQuestionRest.split(u')')[0])+1:]
	elif thisQuestionType=='TextInput':
		var.ncols=5
	else:	
		var.ncols=1
	#if question starts with ( -> ID
	if thisQuestionRest[0]==u'(':
		thisQuestionNext=thisQuestionRest.split(u')')[0].replace(u'(','',1)
		thisQuestionRest=thisQuestionRest[len(thisQuestionNext)+2:]
		var.thisQuestionID=thisQuestionNext
	else:
		var.thisQuestionID=var.questionNumber #added 1 is included here
	#if question starts with ( -> check
	if thisQuestionRest[0]==u'(':
		thisQuestionNext=thisQuestionRest.split(u')')[0].replace(u'(','',1)
		thisQuestionRest=thisQuestionRest[len(thisQuestionNext)+2:]
		if "==" in thisQuestionNext:
			#comparison condition with ID
			checkID=thisQuestionNext.split(u'==')[0]
			checkAnswer=thisQuestionNext.split(u'==')[1]
			#print(checkID+u' '+checkAnswer)
			if (checkID,checkAnswer) in var.answerList:
				#condition fulfilled
				#showing question
				#if question starts with ( -> ?
				if thisQuestionRest[0]==u'(':
					#other operation? add later
					print(u'no processing being added yet for ' + thisQuestionNext)
			else:
				#condition not fulfilled
				#do not show question (but do log)
				var.responseModified=checkID+u'!='+checkAnswer
				var.showQuestion=0
		else:
			#other operation? add later
			print(u'no processing being added yet for ' + thisQuestionNext)
	
	var.thisQuestion=thisQuestionRest.replace(u'--',u'\n')
	__end__

define logger questionaireLogger
	set description "Logs experimental data"
	set auto_log no
	log aaBlock
	log thisQuestionID
	log responseModified
	log aaID

define inline_script setStartTime
	set description "Executes Python code"
	___run__
	#start time of run phase (after preparation)
	var.duration=self.time()-var.startTimeOfBlock
	__end__
	___prepare__
	#set startTime after all initialization of loop
	if var.stimulusNumber==var.firstIndexOfBlock:
		var.startTimeOfBlock=self.time()
		var.endTime=0
	#note that start time of run phase is set in run part of this script
	__end__

define inline_script setTime
	set description "Executes Python code"
	___run__
	#set timing options
	var.endTime=0
	var.maxDuration=var.maxDurationMins*60*1000
	#set maximal number of loop items
	var.loopRuns=len(var.stimulusList)-var.stimulusNumber
	var.firstIndexOfBlock=var.stimulusNumber
	__end__
	set _prepare ""

define logger stimulusLogger
	# log time_Fixation
	set description "Registriert experimentelle Daten"
	set auto_log no
	log model
	log angle
	log orientation
	log axis
	log response
	log response_time
	log correct
	log aaBlock
	log time_Stimulus
	log correct_response
	log duration
	log aaID
	log orientationLeftBase

